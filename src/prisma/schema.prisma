generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model users {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  accountStatus  String
  address        String
  category       String
  createdAt      DateTime  @default(now()) @map("createdAt")
  email          String    @unique(map: "email_1")
  name           String
  password       String
  phoneNumber    String    @unique(map: "phoneNumber_1")
  updatedAt      DateTime  @updatedAt @map("updatedAt")
  permissions    String[]
  roleId         String?
  v              Int?      @ignore
}
model wiwusers {
  id                     String                 @id @default(auto()) @map("_id") @db.ObjectId
  accountStatus          String
  address                String
  category               String
  createdAt              DateTime               @default(now()) @map("createdAt")
  email                  String                 @unique(map: "email_1")
  name                   String
  phoneNumber            String                 @unique(map: "phoneNumber_1")
  updatedAt              DateTime               @updatedAt @map("updatedAt")
  permissions            String[]
  roleId                 String?
  razorpayPayments       String[]               @default([])
  cartItems              Json[]
  v                      Int?                   @ignore
}
model unverifiedWiwUsers {
  id                     String                 @id @default(auto()) @map("_id") @db.ObjectId
  createdAt              DateTime               @default(now()) @map("createdAt")
  phoneNumber            String                 @unique(map: "phoneNumber_1")
  updatedAt              DateTime               @updatedAt @map("updatedAt")
  v                      Int?                   @ignore
}

model deliveryInstructions {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  paymentId   String
  trackingId  String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String    // Foreign key
}


model superAdmin {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  email          String    @unique(map: "email_2")
  name           String
  password       String
  category       String     @unique(map: "category_1")
  permissions    String[]
}

model Role {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  roleName    String   @unique
  permissions String[]
  // users       users[]
}


// Example Prisma schema update
model bot {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  alias          String
  userId        String
  filePath      String
  episode       String?
  videoNumber     String?
  videoDuration  String?
  accessToken    String?
  location      String?
  hashtags      String?
  caption       String?
  status        String    @default("running") // "running", "paused"
  cronSchedule  String?  // E.g., "1 */4 * * *"
  isPaused      Boolean   @default(false)
  nextRun       DateTime? // Optional: Track the next run time
}


model blogs {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  image       String
  author      String
  status      String
  categories  String[]
  cryptoSymbol String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model DeployedContract {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  contractName    String
  deployedAddress String
  walletAddress   String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model totalDownload {
   id          String    @id @default(auto()) @map("_id") @db.ObjectId
  count Int    @default(0)                   // Download count starting from 0
}

model dropShips {
  id                 String      @id @default(auto()) @map("_id") @db.ObjectId
  title              String
  description        String
  image              String
  author             String
  categories         String[]
  price              Float?
  totalItemRemaining Int?
  status             String
  sizes              Size[]
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
}

model Size {
  id                 String      @id @default(auto()) @map("_id") @db.ObjectId
  sizeName           String
  totalItems         Int
  dropShipId         String
  dropShip           dropShips   @relation(fields: [dropShipId], references: [id])
}